Problem :

You are given a string s and two integers x and y. You can perform two types of operations any number of times.

Remove substring "ab" and gain x points.
For example, when removing "ab" from "cabxbae" it becomes "cxbae".
Remove substring "ba" and gain y points.
For example, when removing "ba" from "cabxbae" it becomes "cabxe".
Return the maximum points you can gain after applying the above operations on s.

 

Example 1:

Input: s = "cdbcbbaaabab", x = 4, y = 5
Output: 19
Explanation:
- Remove the "ba" underlined in "cdbcbbaaabab". Now, s = "cdbcbbaaab" and 5 points are added to the score.
- Remove the "ab" underlined in "cdbcbbaaab". Now, s = "cdbcbbaa" and 4 points are added to the score.
- Remove the "ba" underlined in "cdbcbbaa". Now, s = "cdbcba" and 5 points are added to the score.
- Remove the "ba" underlined in "cdbcba". Now, s = "cdbc" and 5 points are added to the score.
Total score = 5 + 4 + 5 + 5 = 19.
Example 2:

Input: s = "aabbaaxybbaabb", x = 5, y = 4
Output: 20
 

Constraints:

1 <= s.length <= 105
1 <= x, y <= 104
s consists of lowercase English letters.


Solution:


class Solution {
    public int maximumGain(String s, int x, int y) {
        StringBuilder str = new StringBuilder();
        String max_str , min_str;
        int max_score = 0 , min_score = 0 , count = 0;
        if(y > x){
            max_str = "ba"; 
            max_score = y;
            min_str = "ab";
            min_score = x;
        }

        else{
            max_str = "ab";
            max_score = x;
            min_str = "ba";
            min_score = y;
        }

        for(char c : s.toCharArray()){
            if(c == max_str.charAt(1) && str.length() > 0 && str.charAt(str.length() -1) == max_str.charAt(0) ){
                str.setLength(str.length() -1);
                count += max_score;
            }
            else{
                str.append(c);
            }
        }

        StringBuilder new_str = new StringBuilder();

        for(char c : str.toString().toCharArray()){
            if(c == min_str.charAt(1) && new_str.length() > 0 && new_str.charAt(new_str.length()-1) == min_str.charAt(0) ){
                new_str.setLength(new_str.length()-1);
                count += min_score;
            }
            else{
                new_str.append(c);
            }
        }
        return count;
    }
}
